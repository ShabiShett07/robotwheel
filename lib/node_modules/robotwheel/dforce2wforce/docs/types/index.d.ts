import differential = require( 'robotwheel/dforce2wforce/differential' );
import mecanum_wheeled = require( 'robotwheel/dforce2wforce/mecanum-wheeled' );
import omni_directional = require( 'robotwheel/dforce2wforce/omnidirectional' );
import tricycle = require( 'robotwheel/dforce2wforce/tricycle' );

/**
* Interface describing the `dforce2wforce` namespace.
*/
interface Namespace {
    /**
    * Computes the resultant forces of differential wheeled robots given the applied wheel forces.
    *
    * @param wheelbase - distance between the wheels (meters)
    * @param f1 - applied force on wheel 1 (Newton)
    * @param f2 - applied force on wheel 2 (Newton)
    * @throws first argument must be a positive integer
    * @returns resultant forces
    *
    * @example
    *
    * var z = differential( 5.0, 5.0, 5.0 );
    * // z => <Float64Array>[ 10.0, 0.0, 0.0 ]
    */
	differential: typeof differential;

    /**
	* Computes the resultant forces of omnidirectional wheeled robots given the applied wheel forces.
    *
    * @param wheelbase - distance between the left and right wheels (meters)
    * @param trackwidth - distance between the front and rear wheels (meters)
    * @param f1 - applied force on wheel 1 (Newton)
    * @param f2 - applied force on wheel 2 (Newton)
    * @param f3 - applied force on wheel 3 (Newton)
    * @param f4 - applied force on wheel 4 (Newton)
    * @throws first argument must be a positive integer
    * @throws second argument must be a positive integer
    * @returns resultant forces
    *
    * @example
    *
    * var sqrt = require( '@stdlib/math/base/special/sqrt' );
    *
    * var z = mecanum_wheeled( 5.0, 5.0, 5.0 * sqrt( 2.0 ), 5.0 * sqrt( 2.0 ), 5.0 * sqrt( 2.0 ), 5.0 * sqrt( 2.0 ) );
    * // z => <Float64Array>[ 20.0, 0.0, 0.0 ]
    */
	mecanum_wheeled: typeof mecanum_wheeled;

    /**
    * Computes the resultant forces of omnidirctional wheeled robots given the applied wheel forces.
    *
    * @param wheelbase - distance of wheel from the center of the robot (meters)
    * @param f1 - applied force on wheel 1 (Newton)
    * @param f2 - applied force on wheel 2 (Newton)
    * @param f3 - applied force on wheel 3 (Newton)
    * @throws first argument must be a positive integer
    * @returns resultant forces
    *
    * @example
    *
    * var z = omni_directional( 2.0, 5.0, 5.0, 5.0 );
    * // z => <Float64Array>[ 5.0, ~-2.886, ~2.886 ]
    */
	omni_directional: typeof omni_directional;

    /**
    * Computes the resultant forces of tricycle wheeled robots given the applied wheel forces.
    *
    * @param wheelbase - distance between front wheel and rear wheels (meters)
    * @param f1 - applied force on front wheel (Newton)
    * @param theta - rotation of the front wheel ( degrees )
    * @throws first argument must be a positive integer
    * @returns resultant forces
    *
    * @example
    *
    * var z = tricycle( 5.0, 2.0, 360.0 );
    * // z => <Float64Array>[ 2.0, 0.0, 0.0 ]
    */
	tricycle: typeof tricycle;
}

/**
* Final position to wheel angular velocity computation
*/
declare var ns: Namespace;

// EXPORTS //

export = ns;
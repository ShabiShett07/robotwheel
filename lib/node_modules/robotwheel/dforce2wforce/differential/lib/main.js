// MODULES //
var Float64Array = require( '@stdlib/array/float64' );
var format = require( '@stdlib/string/format' );
var dgemm = require('@stdlib/blas/base/dgemm');

// MAIN //

/**
* Computes the resultant forces of differential wheeled robots given the applied wheel forces.
*
* @param {PositiveInteger} wheelbase - distance between the wheels (meters)
* @param {number} f1 - applied force on wheel 1 (Newton)
* @param {number} f2 - applied force on wheel 2 (Newton)
*
* @example
* var differential = require( 'robotwheel/dforce2wforce/differential' );
*
* var z = differential( 5.0, 5.0, 5.0 );
* // z => <Float64Array>[ 10.0, 0.0, 0.0 ]
*/
function differential( wheelbase, f1, f2 ) {
    var wheel_force_vector;
    var transformation_matrix;
    var directional_force_vector;
    var d;

    if ( wheelbase <= 0 ) {
        throw new RangeError( format( 'invalid argument. Second argument must be a positive integer. Value: `%d`.', wheelbase ) );
    }

    d = wheelbase / 2;

    wheel_force_vector = new Float64Array([f1, f2]);

    directional_force_vector = new Float64Array( 3 );

    transformation_matrix = new Float64Array([
        1, 1,
        0, 0,
        -d, d
    ]);

    dgemm('row-major', 'no-transpose', 'no-transpose',
        3, 1, 2,
        1,
        transformation_matrix, 2,
        wheel_force_vector, 1,
        0,
        directional_force_vector, 1);

    return directional_force_vector;
}


// EXPORTS //
module.exports = differential;
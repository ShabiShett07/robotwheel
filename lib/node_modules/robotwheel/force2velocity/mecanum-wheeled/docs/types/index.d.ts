/**
* Interface describing `mecanum-wheeled`.
*/
interface Routine {
    /**
    * Computes the wheel velocities of mecanum wheeled robots given the applied forces in all directions.
    *
    * @param radius - radius of the wheel (meters)
    * @param wheelbase - distance between the left and right wheels (meters)
    * @param trackwidth - distance between the front and rear wheels (meters)
    * @param maximum_wheel_velocity - maximum angular velocity the motor can reach (rad/s)
    * @param stall_torque - maximum torque the motor can produce when it is not rotating (Nm)
    * @param fx - totoal force acting on robot in x direction (Newton)
    * @param fy - totoal force acting on robot in y direction (Newton)
    * @param mz - rotational moment (torque) applied about the vertical z-axis (Nm)
    *
    * @example
    * var mecanum_wheeled = require( 'robotwheel/force2point/mecanum-wheeled' );
    *
    * var z = mecanum_wheeled( 2.0, 1.0, 30.0, 10.0, 0.0, 10.0, 0.0 );
    * // z => <Float64Array>[ ~10.606, ~-10.606, ~10.606, ~-10.606 ]
    */
    ( wheelbase: number, trackwidth: number, maximum_wheel_velocity: number, stall_torque: number, fx: number, fy: number, mz: number ): Float64Array;
}

/**
* Computes the wheel velocities of mecanum wheeled robots given the applied forces in all directions.
*
* @param {PositiveInteger} radius - radius of the wheel (meters)
* @param {PositiveInteger} wheelbase - distance between the left and right wheels (meters)
* @param {PositiveInteger} trackwidth - distance between the front and rear wheels (meters)
* @param {number} maximum_wheel_velocity - maximum angular velocity the motor can reach (rad/s)
* @param {number} stall_torque - maximum torque the motor can produce when it is not rotating (Nm)
* @param {number} fx - totoal force acting on robot in x direction (Newton)
* @param {number} fy - totoal force acting on robot in y direction (Newton)
* @param {number} mz - rotational moment (torque) applied about the vertical z-axis (Nm)
*
* @example
* var mecanum_wheeled = require( 'robotwheel/force2point/mecanum-wheeled' );
*
* var z = mecanum_wheeled( 2.0, 1.0, 30.0, 10.0, 0.0, 10.0, 0.0 );
* // z => <Float64Array>[ ~10.606, ~-10.606, ~10.606, ~-10.606 ]
*/
declare var mecanum_wheeled: Routine;

// EXPORTS //

export = mecanum_wheeled;
// MODULES //
var Float64Array = require( '@stdlib/array/float64' );
var format = require( '@stdlib/string/format' );
var dgemm = require('@stdlib/blas/base/dgemm');
var dscal = require('@stdlib/blas/base/dscal');
const sqrt = require('@stdlib/math/base/special/sqrt');

// MAIN //

/**
* Computes the wheel velocities of mecanum wheeled robots given the applied forces in all directions.
*
* @param {PositiveInteger} radius - radius of the wheel (meters)
* @param {PositiveInteger} wheelbase - distance between the left and right wheels (meters)
* @param {PositiveInteger} trackwidth - distance between the front and rear wheels (meters)
* @param {number} maximum_wheel_velocity - maximum angular velocity the motor can reach (rad/s)
* @param {number} stall_torque - maximum torque the motor can produce when it is not rotating (Nm)
* @param {number} fx - totoal force acting on robot in x direction (Newton)
* @param {number} fy - totoal force acting on robot in y direction (Newton)
* @param {number} mz - rotational moment (torque) applied about the vertical z-axis (Nm)
*
* @example
* var mecanum_wheeled = require( 'robotwheel/force2point/mecanum-wheeled' );
*
* var z = mecanum_wheeled( 2.0, 1.0, 30.0, 10.0, 0.0, 10.0, 0.0 );
* // z => <Float64Array>[ ~10.606, ~-10.606, ~10.606, ~-10.606 ]
*/
function mecanum_wheeled(wheelbase, trackwidth, maximum_wheel_velocity, stall_torque, fx, fy, mz) {
    var force_matrix;
    var wheel_velocity_matrix;
    var transformation_matrix;
    var d;
    var l;
    var t;
    var k;

    wheel_velocity_matrix = new Float64Array( 4 );

    force_matrix = new Float64Array( [ fx, fy, mz ] );

    if ( wheelbase <= 0 ) {
        throw new RangeError( format( 'invalid argument. Second argument must be a positive integer. Value: `%d`.', wheelbase ) );
    }
    if ( trackwidth <= 0 ) {
        throw new RangeError( format( 'invalid argument. Third argument must be a positive integer. Value: `%d`.', wheelbase ) );
    }

    l = trackwidth / 2;

    d = wheelbase / 2;

    t = l - d;

    k = maximum_wheel_velocity / stall_torque;

    transformation_matrix = new Float64Array([
        (1 / 2), (1 / 2), (t / 2),
        (1 / 2), -(1 / 2), (t / 2),
        (1 / 2), (1 / 2), -(t / 2),
        (1 / 2), -(1 / 2), -(t / 2),
    ]);

    dgemm('row-major', 'no-transpose', 'no-transpose',
        4, 1, 3,
        1,
        transformation_matrix, 3,
        force_matrix, 1,
        0,
        wheel_velocity_matrix, 1);

    dscal( 4, ( k / sqrt( 2 ) ), wheel_velocity_matrix, 1 );

    return wheel_velocity_matrix;
}


// EXPORTS //
module.exports = mecanum_wheeled;
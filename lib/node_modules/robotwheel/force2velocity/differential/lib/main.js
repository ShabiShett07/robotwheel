// MODULES //
var Float64Array = require( '@stdlib/array/float64' );
var format = require( '@stdlib/string/format' );
var dgemm = require('@stdlib/blas/base/dgemm');
var dscal = require('@stdlib/blas/base/dscal');

// MAIN //

/**
* Computes the wheel velocities of differential robots given the applied forces in all directions.
*
* @param {PositiveInteger} radius - radius of the wheel (meters)
* @param {PositiveInteger} wheelbase - distance between the left and right wheels (meters)
* @param {number} maximum_wheel_velocity - maximum angular velocity the motor can reach (rad/s)
* @param {number} stall_torque - maximum torque the motor can produce when it is not rotating (Nm)
* @param {number} fx - totoal force acting on robot in x direction (Newton)
* @param {number} fy - totoal force acting on robot in y direction (Newton)
* @param {number} mz - rotational moment (torque) applied about the vertical z-axis (Nm)
*
* @example
* var differential = require( 'robotwheel/force2point/differential' );
*
* var z = differential( 10.0, 20.0, 10.0, 5.0, 10.0, 15.0 );
* // z => <Float64Array>[ 2.0, 8.0 ]
*/
function differential(wheelbase, maximum_wheel_velocity, stall_torque, fx, fy, mz) {
    var force_matrix;
    var wheel_velocity_matrix;
    var transformation_matrix;
    var d;
    var k;

    wheel_velocity_matrix = new Float64Array( 2 );

    force_matrix = new Float64Array( [ fx, fy, mz ] );

    if ( wheelbase <= 0 ) {
        throw new RangeError( format( 'invalid argument. Second argument must be a positive integer. Value: `%d`.', wheelbase ) );
    }

    d = wheelbase / 2;

    k = maximum_wheel_velocity / stall_torque;

    transformation_matrix = new Float64Array([
        d, 0, -1,
        d, 0, 1
    ]);

    dgemm('row-major', 'no-transpose', 'no-transpose',
        2, 1, 3,
        1,
        transformation_matrix, 3,
        force_matrix, 1,
        0,
        wheel_velocity_matrix, 1);

    dscal( 2, k / ( 2 * d ), wheel_velocity_matrix, 1 );

    return wheel_velocity_matrix;
}


// EXPORTS //
module.exports = differential;
import differential = require( 'robotwheel/point2velocity/differential' );
import mecanum_wheeled = require( 'robotwheel/point2velocity/mecanum-wheeled' );
import omni_directional = require( 'robotwheel/point2velocity/omnidirectional' );
import skid_steering = require( 'robotwheel/point2velocity/skid-steering' );

/**
* Interface describing the `point2velocity` namespace.
*/
interface Namespace {
    /**
    * Computes the final orientation of differential wheeled robots given wheel velocities of the robot.
    *
    * @param radius - radius of the wheel
    * @param wheelbase - distance between two wheels
    * @param x0 - initial x position in meters
    * @param y0 - initial y position in meters
    * @param psi0 - initial orientation in degrees
    * @param wheel_velocity_1 - velocity of the first wheel
    * @param wheel_velocity_2 - velocity of the second wheel
    * @param time - time in seconds
    * @throws first argument must be a positive integer
    * @throws second argument must be a positive integer
    * @returns final position
    *
    * @example
    *
    * var z = differential( 0.1, 0.4, 0.0, 0.0, 0.0, 0.5, 0.0, 0.0, 1.0 );
    * // z => <Float64Array>[ 0.5, 0.0, 0.0 ]
    */
    differential: typeof differential;

    /**
    * Computes the final orientation of mecanum-wheeled robots given wheel velocities of the robot.
    *
    * @param radius - radius of the wheel
    * @param wheelbase - distance between the front and rear wheels
    * @param trackwidth - distance between the left and right wheels
    * @param x0 - initial x position in meters
    * @param y0 - initial y position in meters
    * @param psi0 - initial orientation in degrees
    * @param wheel_velocity_1 - velocity of the first wheel
    * @param wheel_velocity_2 - velocity of the second wheel
    * @param wheel_velocity_3 - velocity of the third wheel
    * @param wheel_velocity_4 - velocity of the fourth wheel
    * @param time - time in seconds
    * @throws first argument must be a positive integer
    * @throws second argument must be a positive integer
    * @throws third argument must be a positive integer
    * @returns final position
    *
    * @example
    *
    * var z = mecanum_wheeled( 0.1, 1.0, 0.8, 0.0, 0.0, 0.0, 5.0, 15.0, 5.0, 15.0, 1.0 );
    * // z => <Float64Array>[ 1.0, 0.5, ~0.0 ]
    */
    mecanum_wheeled: typeof mecanum_wheeled;

    /**
    * Computes the final orientation of omni directional wheeled robots given wheel velocities of the robot.
    *
    * @param radius - radius of the wheel
    * @param wheelbase - distance of wheel from the center
    * @param x0 - initial x position in meters
    * @param y0 - initial y position in meters
    * @param psi0 - initial orientation in degrees
    * @param wheel_velocity_1 - velocity of the first wheel
    * @param wheel_velocity_2 - velocity of the second wheel
    * @param wheel_velocity_3 - velocity of the third wheel
    * @param time - time in seconds
    * @throws first argument must be a positive integer
    * @throws second argument must be a positive integer
    * @returns final position
    *
    * @example
    *
    * var z = omni_directional( 0.1, 0.4, 0.0, 0.0, 0.0, 0.0, ~-4.33, ~4.33, 1.0 );
    * // z => <Float64Array>[ 0.5, 0.0, 0.0 ]
    */
    omni_directional: typeof omni_directional;

    /**
   * Computes the wheel velocities of skid steering wheeled robots given final orientation of the robot.
    *
    * @param radius - radius of the wheel
    * @param wheelbase - distance of wheel from the center
    * @param x0 - initial x position in meters
    * @param y0 - initial y position in meters
    * @param psi0 - initial orientation in degrees
    * @param wheel_velocity_1 - velocity of the first wheel
    * @param wheel_velocity_2 - velocity of the second wheel
    * @param wheel_velocity_3 - velocity of the third wheel
    * @param wheel_velocity_4 - velocity of the fourth wheel
    * @param time - time in seconds
    * @throws first argument must be a positive integer
    * @throws second argument must be a positive integer
    * @returns final position
    *
    * @example
    *
    * var z = skid_steering( 0.1, 0.4, 0.0, 0.0, 0.0, 5.0, 5.0, 5.0, 5.0, 1.0 );
    * // z => <Float64Array>[ 0.5, 0.0, 0.0 ]
    */
    skid_steering: typeof skid_steering;
}

/**
* Final position to wheel angular velocity computation
*/
declare var ns: Namespace;

// EXPORTS //

export = ns;